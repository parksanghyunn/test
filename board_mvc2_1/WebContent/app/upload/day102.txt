	[jsp 방식]	
	a.jsp --> b.jsp --> c.jsp
	
	각 페이지마다 필요시 자바 코드가 작성되며, DB와 연결하는 코드도 jsp파일 안에서 모두 작성된다.
	분리되어 있지 않기 때문에 소규모 프로젝트에 어울리는 방식이며 가독성이 떨어지고 분업과
	유지보수가 좋지 않다.

MVC
	[model1 방식]
	a.jsp --> b.jsp --> c.jsp
		   ↑
		dao, vo

	b.jsp에서 dao를 호출함으로써 자바코드가 섞이게 된다. 선언은 분리되어 java 페이지에 구현이
	되어 있어서 jsp내의 java코드 양이 줄어들지만 결국 사용은 jsp페이지에서 하기 때문에
	Controller와 View가 섞여있게 된다.
	페이지가 확장될 수록 유지보수가 상대적으로 좋지 않다.


	[model2 방식]
	
					    - forward
					    - redirect
	a.jsp --> web.xml --> Front Controller --> b.jsp
				    ↓ ↑
			Controller(000Action.java)
				    ↓ ↑
				 DAO, VO
				    ↓ ↑
				    DB		
	
	a.jsp에서 다음 페이지를 이동하기 전 필요한 비지니스 로직을 완벽히 분리하여 관리한다.
	사용자가 정의한 확장자(.me, .bo,...)를 페이지 이동 주소에 작성하게 되면 서블릿이 web.xml에
	가서 가야할 경로를 찾는다. web.xml에 파일 경로를 하나씩 모두 만들게 되면 코드가 길어지기 때문에
	*.me와 같은 방법을 사용해서 .me가 붙은 모든 요청을 하나의 경로로 보내주도록 설정해 놓는다.
	이 경로를 Front Controller로 설정해 놓고, 들어온 요청에서 .me 앞에 있는 요청명으로
	분기처리를 하여 알맞는 Controller를 호출해준다. 어떤 로직을 수행할 지와 수행한 로직의
	결과를 통해 응답까지 해주는 역할을 Front Controller가 하게 된다. 비지니스 로직을 Controller 안에서
	모두 작업하게 되면 마찬가지로 코드가 길어지고 유지보수 및 재사용이 어렵기 때문에 DAO와 VO를 만들어 준다.
	각 Controller별로 요청과 응답객체를 전달받는 메소드가 필요하고 이를 Action이라는 인터페이스에
	정의해 놓은 후 지정받아서 구현하게 된다. 이 메소드의 이름을 execute()라고 한다.
	execute() 내부에서의 작업들을 DAO에 메소드로 구현해 놓고 사용하며, 내부 로직이 모두 완료되면
	페이지 이동을 할 것인지, 어떤 방식(forward, redirect)으로 할 것인지, 그리고 어디로 이동할
	것인지를 결정하여 리턴해 준다. 리턴 타입은 ActionForward 클래스 타입으로 설정하며,
	ActionForward 필드에 이에 관련된 메소드를 구현하고 Front Controller에서 결과를 응답할 때
	사용하게 된다.
	
	위의 설명처럼 설계가 굉장히 복잡하기 때문에 대규모가 아닌 소규모 프로젝트에 반영했을 때에는
	오히려 좋지 않은 결과를 초래한다. 따라서 맞는 목적으로 선택하여 설계해야 한다.

	- Redirect
	Web Browser -> 결제 페이지(현재 페이지) -> 새로 고침(혹은 다음 페이지에서 뒤로가기) --> 결제 페이지(현재 페이지)
	
	클라이언트가 요청했을 때 이전의 값이 남아있지 않도록 하기 위해 사용한다.
	예)회원가입, 로그인, 글 작성, 결제 등
	

	- Forward
	Web Browser -> 검색(현재 페이지) -> 검색 결과 페이지(검색한 키워드 값 유지)
	
	클라이언트가 request 객체를 통해 값을 넘겨주어야 할 때 혹은 단순 조회를 요청할 때 사용한다.
	Redirect보다 성능이 좋다.
	예)목록, 검색 등

[실습]
	[join.js]
	※중복검사 버튼 생성 후 Ajax를 통해 중복검사 구현하기
	 중복이 있을 때 회원가입 완료 막아주기

	컨트롤러에서 .jsp로 이동하지 않고 .me로 이동하는 이유 작성

	redirect 방식일 때 .me가 작동하지 않는 이유, 해결방법


[실습] - 로그인

	member.xml에서 쿼리 작성(아이디 리턴)
	DAO에서 메소드 선언(리턴 값 : 아이디)
	
	컨트롤러에서 로그인 성공시 
	Session객체에 아이디 담아주기(HttpSession session = request.getSession();)
	/board/BoardList.bo로 이동(redirect 방식으로 전송)
	Front Controller 로그인 분기 처리 구현
	
	로그인 실패 시
	loginForm.jsp로 이동(forward 방식으로 전송)
	loginForm.jsp에서 로그인 실패인지 판단 후 경고 메세지 출력(JSTL사용)

	로그인 컨트롤러에서 get방식으로 login.jsp로 데이터 전송
	login.jsp에서 if문(JSTL)으로 확인










