package com.psh.dao;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Properties;
import java.util.Random;

import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

/**
 * Servlet implementation class mail
 */
@WebServlet("/mail")
public class mail extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public mail() {
        super();
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String email = request.getParameter("email");
		MemberDAO dao = new MemberDAO();
		
		if(dao.find(email)) {
			// mail server 설정
			// 메일을 어느 계정으로 보낼지 설정해준다.
			String host = "smtp.naver.com"; //host를 설정해준다.
			String user = ""; // 메일을 보낼 네이버 계정의 아이디를 입력해준다.
			String password = "";// 메일을 보낼 네이버 계정의 패스워드를 입력해준다.
			
			// 메일 받을 주소를 받아와 to_email에 담아준다.
			String to_email = email;
			
			// SMTP 서버 정보를 설정한다.
			Properties props = new Properties();
			props.put("mail.smtp.host", host);
			props.put("mail.smtp.port", 465);
			props.put("mail.smtp.auth", "true");
			props.put("mail.smtp.ssl.enable", "true");
			props.put("mail.smtp.starttls.enable", "true");
			props.put("mail.debug", "true");
			
			// 인증 번호 생성기 (random을 통해 난수를 생성한다.)
			StringBuffer temp = new StringBuffer();
			Random rnd = new Random();
			for (int i = 0; i < 10; i++) {
				int rIndex = rnd.nextInt(3);
				switch (rIndex) {
				case 0:
					// a-z
					temp.append((char) ((int) (rnd.nextInt(26)) + 97));
					break;
				case 1:
					// A-Z
					temp.append((char) ((int) (rnd.nextInt(26)) + 65));
					break;
				case 2:
					// 0-9
					temp.append((rnd.nextInt(10)));
					break;
				}
			}
			String AuthenticationKey = temp.toString();
			System.out.println(AuthenticationKey);
			
			Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication(user, password);
				}
			});
			
			// email 전송
			try {
				MimeMessage msg = new MimeMessage(session);
				msg.setFrom(new InternetAddress(user, "테스트용 사용자"));
				msg.addRecipient(Message.RecipientType.TO, new InternetAddress(to_email));
				
				// 메일 제목
				msg.setSubject("임시비밀번호가 도착했습니다.");
				// 메일 내용
				msg.setText("임시비밀번호 :" + temp+"\n로그인 후 비밀번호를 변경해주세요.");
				
				Transport.send(msg);
				System.out.println("이메일 전송");
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			HttpSession saveKey = request.getSession();
			saveKey.setAttribute("AuthenticationKey", AuthenticationKey);
			
			//받아온 email과 생성된 난수 temp를 findCh()에 넘겨 비밀번호를 변경해주고 성공시 find_ok.jsp로 이동한다
			if(dao.findCh(email,temp.toString())) {
				response.sendRedirect("find_ok.jsp");
			}else {
				//실패시 비밀번호 실패 경고문을 출력해준다.
				PrintWriter out = response.getWriter();
				out.println("<script>");
				out.println("alert(비밀번호 변경 실패, 잠시후 다시 시도해 주세요);");
				out.println("</script>");
			}
		}
	}

}
